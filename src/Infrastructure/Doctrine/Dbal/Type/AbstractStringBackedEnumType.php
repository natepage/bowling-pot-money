<?php
declare(strict_types=1);

namespace App\Infrastructure\Doctrine\Dbal\Type;

use Doctrine\DBAL\Platforms\AbstractPlatform;
use Doctrine\DBAL\Types\Type;

abstract class AbstractStringBackedEnumType extends Type
{
    public function convertToDatabaseValue($value, AbstractPlatform $platform): mixed
    {
        if ($value instanceof \BackedEnum) {
            return $value->value;
        }

        $enumClass = $this->getEnumClass();
        if (\is_string($value) && $enumClass::tryFrom($value) instanceof $enumClass) {
            return $value;
        }

        throw new \LogicException(\sprintf(
            'Value must be an instance of BackedEnum, "%s" given.',
            \is_object($value) ? \get_class($value) : \gettype($value)
        ));
    }

    public function convertToPHPValue($value, AbstractPlatform $platform): \BackedEnum
    {
        if (\is_string($value)) {
            return ($this->getEnumClass())::tryFrom($value);
        }

        return parent::convertToPHPValue($value, $platform); // TODO: Change the autogenerated stub
    }

    public function getSQLDeclaration(array $column, AbstractPlatform $platform): string
    {
        return $platform->getStringTypeDeclarationSQL($column);
    }

    abstract protected function getEnumClass(): string;
}
