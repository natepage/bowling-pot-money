AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  CustomDomainName:
    Type: String
    Description: The custom domain name for the API
    Default: bowlingcokemoney.com
  PublicCertificateArn:
    Type: String
    Description: ARN of public certificate created in us-east-1
    Default: 'arn:aws:acm:us-east-1:821127981040:certificate/cf4bb212-72b3-4d80-9809-c08395a64064'
  HostedZoneId:
    Type: String
    Description: Route53 HostedZone ID for custom domain
    Default: Z02043462K7X1948WL5PW

Resources:
  # ------ DynamoDB Table ------
  SessionsDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expires
        Enabled: true

  # ------ S3 Bucket Static Assets ------
  StaticAssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: static-assets.bowlingcokemoney.com
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended

  StaticAssetsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsS3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontDistributionReadOnly
            Effect: Allow
            Principal:
              Service: !Sub 'cloudfront.${AWS::URLSuffix}'
            Action: 's3:GetObject'
            Resource: !Sub '${StaticAssetsS3Bucket.Arn}/*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
          - Sid: DenyNotHttpsTraffic
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${StaticAssetsS3Bucket.Arn}/*'
              - !GetAtt 'StaticAssetsS3Bucket.Arn'
            Condition:
              Bool:
                'aws:SecureTransport': false

  # ------ Lambda ------
  Website:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Website'
      Description: !Sub 'Public website for ${AWS::StackName}'
      CodeUri: .
      Handler: public/index_lambda.php
      Timeout: 30 # in seconds (API Gateway has a timeout of 30 seconds)
      MemorySize: 512
      Runtime: provided.al2
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:534081306603:layer:php-82:33'
      Events:
        HttpRoot:
          Type: HttpApi
      Environment:
        Variables:
          APP_ENV: prod
          APP_CACHE_DIR: /tmp/var/cache
          APP_LOG_DIR: /tmp/var/log
          AUTH0_CLIENT_ID: bref-ssm:/app/AUTH0_CLIENT_ID
          AUTH0_CLIENT_SECRET: bref-ssm:/app/AUTH0_CLIENT_SECRET
          AUTH0_REDIRECT_URI: https://bowlingcokemoney.com/security/auth0/callback
          BREF_LOOP_MAX: 10
          BUGSNAG_API_KEY: bref-ssm:/app/BUGSNAG_API_KEY
          DATABASE_URL: bref-ssm:/app/DATABASE_URL
          MAILER_DSN: bref-ssm:/app/MAILER_DSN
      Policies:
        - Statement:
          - Sid: SessionDynamoDbTablePolicy
            Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Resource: !GetAtt SessionsDynamoDbTable.Arn
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
              - 'ssm:GetParameters'
              - 'ssm:GetParameter'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app/*'

  # ------ CloudFront ------
  CloudFrontFunctionForwardedHostHeader:
    Type: AWS::CloudFront::Function
    Properties:
      Name: CloudFrontFunctionForwardedHostHeader
      AutoPublish: true
      FunctionConfig:
        Comment: Forward host to API Gateway
        Runtime: cloudfront-js-1.0
      FunctionCode: |-
        function handler(event) {
          var request = event.request;
          
          request.headers['x-forwarded-host'] = {value: request.headers.host.value};
          
          return request;
        }

  CloudFrontLogS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cloudfront-logs.bowlingcokemoney.com
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended

  CloudFrontLogS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudFrontLogS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub "${CloudFrontLogS3Bucket.Arn}/*"
              - !GetAtt 'CloudFrontLogS3Bucket.Arn'
            Condition:
              Bool:
                'aws:SecureTransport': false

  CloudFrontS3OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-S3CloudFrontS3OriginAccessControl'
        Description: !Sub '${AWS::StackName}-S3CloudFrontS3OriginAccessControl'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref CustomDomainName
        CacheBehaviors:
          - PathPattern: '/public/build/*'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Managed-CachingOptimized
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # Managed-CORS-S3Origin
            Compress: true
            TargetOriginId: StaticAssetsS3BucketOrigin
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: '/public/bundles/*'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Managed-CachingOptimized
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # Managed-CORS-S3Origin
            Compress: true
            TargetOriginId: StaticAssetsS3BucketOrigin
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior: # Use default cache behavior for the API
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # Managed-CachingDisabled
          OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac' # Managed-AllViewerExceptHostHeader
          Compress: true
          TargetOriginId: Website
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Ref CloudFrontFunctionForwardedHostHeader
        Origins:
          - Id: Website
            DomainName: !Sub '${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
          - Id: StaticAssetsS3BucketOrigin
            DomainName: !GetAtt StaticAssetsS3Bucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontS3OriginAccessControl
            S3OriginConfig: {}
        PriceClass: PriceClass_All # Only price class that supports AU
        ViewerCertificate:
          AcmCertificateArn: !Ref PublicCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Logging:
          Bucket: !GetAtt CloudFrontLogS3Bucket.DomainName
          IncludeCookies: false
          Prefix: !Sub 'AWSLogs/${AWS::AccountId}/CloudFront/'

  # ------ Route53 ------
  CloudFrontRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # Default CloudFront HostedZoneId
          Name: !Ref CustomDomainName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # Default CloudFront HostedZoneId
          Name: !Ref CustomDomainName
          Type: AAAA

Outputs:
  BowlingCokeMoneyWebsiteUrl:
    Description: 'URL of our function'
    Value: 'https://bowlingcokemoney.com/'