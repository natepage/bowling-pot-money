AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Environment:
      Variables:
        APP_ENV: prod
        APP_RUNTIME: Runtime\Bref\Runtime
        BREF_LOOP_MAX: 100
        AUTH0_CLIENT_ID: bref-ssm:/app/AUTH0_CLIENT_ID
        AUTH0_CLIENT_SECRET: bref-ssm:/app/AUTH0_CLIENT_SECRET
        DATABASE_URL: bref-ssm:/app/DATABASE_URL
        MAILER_DSN: bref-ssm:/app/MAILER_DSN
        AUTH0_REDIRECT_URI: https://twjqadat3h.execute-api.ap-southeast-2.amazonaws.com/admin/auth0/callback

Resources:
  # ------ Network ------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/25
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the NAT Instance"
      SecurityGroupIngress:
      # http & https traffic
      - CidrIp: 10.0.0.32/28
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - CidrIp: 10.0.0.32/28
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      #ssh access
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      # routing
      - CidrIp: 10.0.0.32/28
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
      VpcId: !Ref VPC

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Lambda Functions"
      SecurityGroupIngress:
        # http & https traffic
        - CidrIp: 10.0.0.16/28
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 10.0.0.16/28
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.16/28
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.32/28
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.nano
      ImageId: ami-0c2cb2ab4d9226c27
      SourceDestCheck: false
      #KeyName: ryan.pem
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref NatSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-instance

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -   Key: Name
            Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -   Key: Name
            Value: Private

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # ------ Database ------
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets available for the RDS DB Instance"
      DBSubnetGroupName: "bowling-coke-money-serverless-db-subnet-group"
      SubnetIds:
        - !Ref PrivateSubnet

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: bowling-coke-money-serverless
      DBSubnetGroupName: "bowling-coke-money-serverless-db-subnet-group"
      EngineVersion: 15.2
      MasterUsername: postgres
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 16
      VpcSecurityGroupIds:
        - !Ref LambdaSecurityGroup

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgres
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref DatabaseCluster

  # ------ Lambda ------
  Website:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'Symfony-Serverless'
      CodeUri: .
      Handler: public/index.php
      Timeout: 30 # in seconds (API Gateway has a timeout of 30 seconds)
      MemorySize: 512
      Runtime: provided.al2
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:534081306603:layer:php-82-fpm:33'
      Events:
        HttpRoot:
          Type: HttpApi
      Policies:
        - Statement:
          - Sid: SSMGetParameterPolicy
            Effect: Allow
            Action:
              - 'ssm:GetParameters'
              - 'ssm:GetParameter'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app/*'
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet

Outputs:
  BowlingCokeMoneyWebsiteUrl:
    Description: 'URL of our function in the *Prod* environment'
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'